/* TokenSequenceParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. TokenSequenceParserTokenManager.java */
package edu.stanford.nlp.ling.tokensregex.parser;
// all generated classes are in this package

//imports
import edu.stanford.nlp.ling.tokensregex.types.*;
import edu.stanford.nlp.ling.tokensregex.*;
import edu.stanford.nlp.util.CoreMap;
import edu.stanford.nlp.util.ArrayMap;
import edu.stanford.nlp.util.Pair;
import java.io.Reader;
import java.io.StringReader;
import java.util.*;
import java.lang.RuntimeException;

/** Token Manager. */
@SuppressWarnings("unused")class TokenSequenceParserTokenManager implements TokenSequenceParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20000020800000L) != 0L)
            return 50;
         if ((active0 & 0x1000000000000L) != 0L)
            return 52;
         if ((active0 & 0x18000000L) != 0L)
         {
            jjmatchedKind = 7;
            return 53;
         }
         if ((active0 & 0x100000000000L) != 0L)
            return 54;
         if ((active0 & 0x20000000000L) != 0L)
            return 34;
         return -1;
      case 1:
         if ((active0 & 0x18000000L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 1;
            return 53;
         }
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 19;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x18000000L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 2;
            return 53;
         }
         return -1;
      case 3:
         if ((active0 & 0x18000000L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 3;
            return 53;
         }
         return -1;
      case 4:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 4;
            return 53;
         }
         return -1;
      case 5:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 5;
            return 53;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjStartNfaWithStates_0(0, 48, 52);
      case 36:
         return jjStartNfaWithStates_0(0, 41, 34);
      case 38:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x40001000000000L);
      case 40:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L);
      case 41:
         return jjStopAtPos(0, 26);
      case 42:
         return jjStopAtPos(0, 42);
      case 43:
         return jjStartNfaWithStates_0(0, 44, 54);
      case 44:
         return jjStopAtPos(0, 33);
      case 46:
         return jjStopAtPos(0, 35);
      case 58:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_0(0x800c000000000L);
      case 59:
         return jjStopAtPos(0, 30);
      case 61:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x20000000800000L);
      case 63:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 91:
         return jjStopAtPos(0, 31);
      case 93:
         return jjStopAtPos(0, 32);
      case 94:
         return jjStopAtPos(0, 40);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x18000000L);
      case 123:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x2000000000000L);
      case 124:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 125:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 58:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         break;
      case 61:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L);
      case 62:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 63:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8010000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 123:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 124:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         break;
      case 125:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 53);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(3, 52);
         break;
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(4, 28);
         break;
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(4, 38);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(4, 39);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(6, 27);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(8, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 53;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAdd(32); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     { jjCheckNAdd(12); }
                  }
                  break;
               case 5:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(15, 16); }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 33)
                     { jjCheckNAddTwoStates(28, 52); }
                  else if (curChar == 61)
                     { jjCheckNAddTwoStates(28, 50); }
                  else if (curChar == 36)
                     { jjAddStates(0, 1); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  else if (curChar == 47)
                     { jjCheckNAddStates(5, 7); }
                  else if (curChar == 35)
                     { jjCheckNAddStates(8, 10); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     { jjCheckNAddStates(11, 14); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  else if (curChar == 36)
                     { jjCheckNAddTwoStates(34, 36); }
                  else if (curChar == 62)
                     { jjCheckNAdd(28); }
                  else if (curChar == 60)
                     { jjCheckNAdd(28); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAdd(32); }
                  }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     { jjCheckNAdd(36); }
                  }
                  else if (curChar == 36)
                     { jjCheckNAdd(42); }
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 50:
               case 28:
                  if (curChar == 61 && kind > 19)
                     kind = 19;
                  break;
               case 54:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(15, 16); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(46, 47); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                     { jjCheckNAdd(45); }
                  }
                  break;
               case 52:
                  if (curChar == 61)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  if (curChar == 61)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  break;
               case 0:
                  if (curChar == 47)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 35)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 7:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 8:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 9:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 10:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAdd(12); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 16:
                  if (curChar == 46)
                     { jjCheckNAdd(17); }
                  break;
               case 17:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(17); }
                  break;
               case 18:
               case 19:
                  if (curChar == 47)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 21:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 22:
                  if (curChar == 47 && kind > 17)
                     kind = 17;
                  break;
               case 23:
               case 24:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 26:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 27:
                  if (curChar == 34 && kind > 18)
                     kind = 18;
                  break;
               case 29:
                  if (curChar == 60)
                     { jjCheckNAdd(28); }
                  break;
               case 30:
                  if (curChar == 62)
                     { jjCheckNAdd(28); }
                  break;
               case 31:
                  if ((0x5000000000000000L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAdd(32); }
                  break;
               case 33:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(34, 36); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAdd(36); }
                  break;
               case 37:
                  if (curChar == 36)
                     { jjAddStates(0, 1); }
                  break;
               case 38:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 41:
                  if (curChar == 36)
                     { jjCheckNAdd(42); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAdd(42); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddStates(11, 14); }
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(44); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(45); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(46, 47); }
                  break;
               case 48:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 49:
                  if (curChar == 61)
                     { jjCheckNAddTwoStates(28, 50); }
                  break;
               case 51:
                  if (curChar == 33)
                     { jjCheckNAddTwoStates(28, 52); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAdd(32); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     { jjCheckNAdd(12); }
                  }
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAdd(32); }
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 14;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     { jjCheckNAdd(12); }
                  }
                  if (curChar == 69)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 34:
               case 35:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(35); }
                  break;
               case 50:
                  if (curChar == 126 && kind > 20)
                     kind = 20;
                  break;
               case 54:
               case 15:
                  if (curChar == 69)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 1:
                  { jjAddStates(18, 20); }
                  break;
               case 7:
                  { jjAddStates(8, 10); }
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAdd(12); }
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAdd(12); }
                  break;
               case 13:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if (curChar != 69)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  { jjAddStates(5, 7); }
                  break;
               case 25:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  { jjAddStates(2, 4); }
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAdd(32); }
                  break;
               case 39:
               case 40:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAdd(40); }
                  break;
               case 47:
                  if (curChar == 76 && kind > 15)
                     kind = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(18, 20); }
                  break;
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(8, 10); }
                  break;
               case 21:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(5, 7); }
                  break;
               case 26:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 53 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   38, 41, 25, 26, 27, 20, 21, 22, 7, 8, 10, 44, 45, 46, 47, 45, 
   46, 15, 1, 2, 4, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\173", "\75\76", "\175", 
"\50", "\51", "\164\157\153\145\156\163\72", "\164\145\170\164\72", "\75", "\73", 
"\133", "\135", "\54", "\72", "\56", "\46\46", "\174\174", "\72\143\141\163\145", 
"\72\145\154\163\145", "\136", "\44", "\52", "\77", "\53", "\174", "\46", "\77\72", "\41", 
"\173\173", "\175\175", "\72\72", "\50\77\155\51", "\75\75\76", 
"\46\141\156\156\157\164\141\164\145", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public TokenSequenceParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public TokenSequenceParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 53; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7fffffffffff81L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[53];
    private final int[] jjstateSet = new int[2 * 53];

    
    protected char curChar;
}
