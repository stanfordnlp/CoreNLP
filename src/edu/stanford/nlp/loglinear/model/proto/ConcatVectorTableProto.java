// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConcatVectorTable.proto

package edu.stanford.nlp.loglinear.model.proto;

public final class ConcatVectorTableProto {
  private ConcatVectorTableProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ConcatVectorTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:edu.stanford.nlp.loglinear.model.proto.ConcatVectorTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated int32 dimensionSize = 1;</code>
     * @return A list containing the dimensionSize.
     */
    java.util.List<java.lang.Integer> getDimensionSizeList();
    /**
     * <code>repeated int32 dimensionSize = 1;</code>
     * @return The count of dimensionSize.
     */
    int getDimensionSizeCount();
    /**
     * <code>repeated int32 dimensionSize = 1;</code>
     * @param index The index of the element to return.
     * @return The dimensionSize at the given index.
     */
    int getDimensionSize(int index);

    /**
     * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
     */
    java.util.List<edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector> 
        getFactorTableList();
    /**
     * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
     */
    edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector getFactorTable(int index);
    /**
     * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
     */
    int getFactorTableCount();
    /**
     * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
     */
    java.util.List<? extends edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVectorOrBuilder> 
        getFactorTableOrBuilderList();
    /**
     * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
     */
    edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVectorOrBuilder getFactorTableOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code edu.stanford.nlp.loglinear.model.proto.ConcatVectorTable}
   */
  public static final class ConcatVectorTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:edu.stanford.nlp.loglinear.model.proto.ConcatVectorTable)
      ConcatVectorTableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ConcatVectorTable.newBuilder() to construct.
    private ConcatVectorTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ConcatVectorTable() {
      dimensionSize_ = emptyIntList();
      factorTable_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ConcatVectorTable();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVectorTable_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVectorTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable.class, edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable.Builder.class);
    }

    public static final int DIMENSIONSIZE_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.IntList dimensionSize_;
    /**
     * <code>repeated int32 dimensionSize = 1;</code>
     * @return A list containing the dimensionSize.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getDimensionSizeList() {
      return dimensionSize_;
    }
    /**
     * <code>repeated int32 dimensionSize = 1;</code>
     * @return The count of dimensionSize.
     */
    public int getDimensionSizeCount() {
      return dimensionSize_.size();
    }
    /**
     * <code>repeated int32 dimensionSize = 1;</code>
     * @param index The index of the element to return.
     * @return The dimensionSize at the given index.
     */
    public int getDimensionSize(int index) {
      return dimensionSize_.getInt(index);
    }

    public static final int FACTORTABLE_FIELD_NUMBER = 2;
    private java.util.List<edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector> factorTable_;
    /**
     * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
     */
    @java.lang.Override
    public java.util.List<edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector> getFactorTableList() {
      return factorTable_;
    }
    /**
     * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVectorOrBuilder> 
        getFactorTableOrBuilderList() {
      return factorTable_;
    }
    /**
     * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
     */
    @java.lang.Override
    public int getFactorTableCount() {
      return factorTable_.size();
    }
    /**
     * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
     */
    @java.lang.Override
    public edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector getFactorTable(int index) {
      return factorTable_.get(index);
    }
    /**
     * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
     */
    @java.lang.Override
    public edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVectorOrBuilder getFactorTableOrBuilder(
        int index) {
      return factorTable_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getFactorTableCount(); i++) {
        if (!getFactorTable(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < dimensionSize_.size(); i++) {
        output.writeInt32(1, dimensionSize_.getInt(i));
      }
      for (int i = 0; i < factorTable_.size(); i++) {
        output.writeMessage(2, factorTable_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < dimensionSize_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dimensionSize_.getInt(i));
        }
        size += dataSize;
        size += 1 * getDimensionSizeList().size();
      }
      for (int i = 0; i < factorTable_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, factorTable_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable)) {
        return super.equals(obj);
      }
      edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable other = (edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable) obj;

      if (!getDimensionSizeList()
          .equals(other.getDimensionSizeList())) return false;
      if (!getFactorTableList()
          .equals(other.getFactorTableList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDimensionSizeCount() > 0) {
        hash = (37 * hash) + DIMENSIONSIZE_FIELD_NUMBER;
        hash = (53 * hash) + getDimensionSizeList().hashCode();
      }
      if (getFactorTableCount() > 0) {
        hash = (37 * hash) + FACTORTABLE_FIELD_NUMBER;
        hash = (53 * hash) + getFactorTableList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code edu.stanford.nlp.loglinear.model.proto.ConcatVectorTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:edu.stanford.nlp.loglinear.model.proto.ConcatVectorTable)
        edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVectorTable_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVectorTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable.class, edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable.Builder.class);
      }

      // Construct using edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        dimensionSize_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (factorTableBuilder_ == null) {
          factorTable_ = java.util.Collections.emptyList();
        } else {
          factorTable_ = null;
          factorTableBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVectorTable_descriptor;
      }

      @java.lang.Override
      public edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable getDefaultInstanceForType() {
        return edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable.getDefaultInstance();
      }

      @java.lang.Override
      public edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable build() {
        edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable buildPartial() {
        edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable result = new edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) != 0)) {
          dimensionSize_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.dimensionSize_ = dimensionSize_;
        if (factorTableBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            factorTable_ = java.util.Collections.unmodifiableList(factorTable_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.factorTable_ = factorTable_;
        } else {
          result.factorTable_ = factorTableBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable) {
          return mergeFrom((edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable other) {
        if (other == edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable.getDefaultInstance()) return this;
        if (!other.dimensionSize_.isEmpty()) {
          if (dimensionSize_.isEmpty()) {
            dimensionSize_ = other.dimensionSize_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDimensionSizeIsMutable();
            dimensionSize_.addAll(other.dimensionSize_);
          }
          onChanged();
        }
        if (factorTableBuilder_ == null) {
          if (!other.factorTable_.isEmpty()) {
            if (factorTable_.isEmpty()) {
              factorTable_ = other.factorTable_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureFactorTableIsMutable();
              factorTable_.addAll(other.factorTable_);
            }
            onChanged();
          }
        } else {
          if (!other.factorTable_.isEmpty()) {
            if (factorTableBuilder_.isEmpty()) {
              factorTableBuilder_.dispose();
              factorTableBuilder_ = null;
              factorTable_ = other.factorTable_;
              bitField0_ = (bitField0_ & ~0x00000002);
              factorTableBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFactorTableFieldBuilder() : null;
            } else {
              factorTableBuilder_.addAllMessages(other.factorTable_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getFactorTableCount(); i++) {
          if (!getFactorTable(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int v = input.readInt32();
                ensureDimensionSizeIsMutable();
                dimensionSize_.addInt(v);
                break;
              } // case 8
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureDimensionSizeIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  dimensionSize_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 10
              case 18: {
                edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector m =
                    input.readMessage(
                        edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector.PARSER,
                        extensionRegistry);
                if (factorTableBuilder_ == null) {
                  ensureFactorTableIsMutable();
                  factorTable_.add(m);
                } else {
                  factorTableBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.IntList dimensionSize_ = emptyIntList();
      private void ensureDimensionSizeIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          dimensionSize_ = mutableCopy(dimensionSize_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 dimensionSize = 1;</code>
       * @return A list containing the dimensionSize.
       */
      public java.util.List<java.lang.Integer>
          getDimensionSizeList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(dimensionSize_) : dimensionSize_;
      }
      /**
       * <code>repeated int32 dimensionSize = 1;</code>
       * @return The count of dimensionSize.
       */
      public int getDimensionSizeCount() {
        return dimensionSize_.size();
      }
      /**
       * <code>repeated int32 dimensionSize = 1;</code>
       * @param index The index of the element to return.
       * @return The dimensionSize at the given index.
       */
      public int getDimensionSize(int index) {
        return dimensionSize_.getInt(index);
      }
      /**
       * <code>repeated int32 dimensionSize = 1;</code>
       * @param index The index to set the value at.
       * @param value The dimensionSize to set.
       * @return This builder for chaining.
       */
      public Builder setDimensionSize(
          int index, int value) {
        ensureDimensionSizeIsMutable();
        dimensionSize_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 dimensionSize = 1;</code>
       * @param value The dimensionSize to add.
       * @return This builder for chaining.
       */
      public Builder addDimensionSize(int value) {
        ensureDimensionSizeIsMutable();
        dimensionSize_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 dimensionSize = 1;</code>
       * @param values The dimensionSize to add.
       * @return This builder for chaining.
       */
      public Builder addAllDimensionSize(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDimensionSizeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dimensionSize_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 dimensionSize = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDimensionSize() {
        dimensionSize_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.util.List<edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector> factorTable_ =
        java.util.Collections.emptyList();
      private void ensureFactorTableIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          factorTable_ = new java.util.ArrayList<edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector>(factorTable_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector, edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector.Builder, edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVectorOrBuilder> factorTableBuilder_;

      /**
       * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
       */
      public java.util.List<edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector> getFactorTableList() {
        if (factorTableBuilder_ == null) {
          return java.util.Collections.unmodifiableList(factorTable_);
        } else {
          return factorTableBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
       */
      public int getFactorTableCount() {
        if (factorTableBuilder_ == null) {
          return factorTable_.size();
        } else {
          return factorTableBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
       */
      public edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector getFactorTable(int index) {
        if (factorTableBuilder_ == null) {
          return factorTable_.get(index);
        } else {
          return factorTableBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
       */
      public Builder setFactorTable(
          int index, edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector value) {
        if (factorTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFactorTableIsMutable();
          factorTable_.set(index, value);
          onChanged();
        } else {
          factorTableBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
       */
      public Builder setFactorTable(
          int index, edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector.Builder builderForValue) {
        if (factorTableBuilder_ == null) {
          ensureFactorTableIsMutable();
          factorTable_.set(index, builderForValue.build());
          onChanged();
        } else {
          factorTableBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
       */
      public Builder addFactorTable(edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector value) {
        if (factorTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFactorTableIsMutable();
          factorTable_.add(value);
          onChanged();
        } else {
          factorTableBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
       */
      public Builder addFactorTable(
          int index, edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector value) {
        if (factorTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFactorTableIsMutable();
          factorTable_.add(index, value);
          onChanged();
        } else {
          factorTableBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
       */
      public Builder addFactorTable(
          edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector.Builder builderForValue) {
        if (factorTableBuilder_ == null) {
          ensureFactorTableIsMutable();
          factorTable_.add(builderForValue.build());
          onChanged();
        } else {
          factorTableBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
       */
      public Builder addFactorTable(
          int index, edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector.Builder builderForValue) {
        if (factorTableBuilder_ == null) {
          ensureFactorTableIsMutable();
          factorTable_.add(index, builderForValue.build());
          onChanged();
        } else {
          factorTableBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
       */
      public Builder addAllFactorTable(
          java.lang.Iterable<? extends edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector> values) {
        if (factorTableBuilder_ == null) {
          ensureFactorTableIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, factorTable_);
          onChanged();
        } else {
          factorTableBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
       */
      public Builder clearFactorTable() {
        if (factorTableBuilder_ == null) {
          factorTable_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          factorTableBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
       */
      public Builder removeFactorTable(int index) {
        if (factorTableBuilder_ == null) {
          ensureFactorTableIsMutable();
          factorTable_.remove(index);
          onChanged();
        } else {
          factorTableBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
       */
      public edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector.Builder getFactorTableBuilder(
          int index) {
        return getFactorTableFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
       */
      public edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVectorOrBuilder getFactorTableOrBuilder(
          int index) {
        if (factorTableBuilder_ == null) {
          return factorTable_.get(index);  } else {
          return factorTableBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
       */
      public java.util.List<? extends edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVectorOrBuilder> 
           getFactorTableOrBuilderList() {
        if (factorTableBuilder_ != null) {
          return factorTableBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(factorTable_);
        }
      }
      /**
       * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
       */
      public edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector.Builder addFactorTableBuilder() {
        return getFactorTableFieldBuilder().addBuilder(
            edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector.getDefaultInstance());
      }
      /**
       * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
       */
      public edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector.Builder addFactorTableBuilder(
          int index) {
        return getFactorTableFieldBuilder().addBuilder(
            index, edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector.getDefaultInstance());
      }
      /**
       * <code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector factorTable = 2;</code>
       */
      public java.util.List<edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector.Builder> 
           getFactorTableBuilderList() {
        return getFactorTableFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector, edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector.Builder, edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVectorOrBuilder> 
          getFactorTableFieldBuilder() {
        if (factorTableBuilder_ == null) {
          factorTableBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector, edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector.Builder, edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVectorOrBuilder>(
                  factorTable_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          factorTable_ = null;
        }
        return factorTableBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:edu.stanford.nlp.loglinear.model.proto.ConcatVectorTable)
    }

    // @@protoc_insertion_point(class_scope:edu.stanford.nlp.loglinear.model.proto.ConcatVectorTable)
    private static final edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable();
    }

    public static edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ConcatVectorTable>
        PARSER = new com.google.protobuf.AbstractParser<ConcatVectorTable>() {
      @java.lang.Override
      public ConcatVectorTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ConcatVectorTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ConcatVectorTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public edu.stanford.nlp.loglinear.model.proto.ConcatVectorTableProto.ConcatVectorTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVectorTable_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVectorTable_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\027ConcatVectorTable.proto\022&edu.stanford." +
      "nlp.loglinear.model.proto\032\022ConcatVector." +
      "proto\"u\n\021ConcatVectorTable\022\025\n\rdimensionS" +
      "ize\030\001 \003(\005\022I\n\013factorTable\030\002 \003(\01324.edu.sta" +
      "nford.nlp.loglinear.model.proto.ConcatVe" +
      "ctorB@\n&edu.stanford.nlp.loglinear.model" +
      ".protoB\026ConcatVectorTableProto"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.getDescriptor(),
        });
    internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVectorTable_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVectorTable_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVectorTable_descriptor,
        new java.lang.String[] { "DimensionSize", "FactorTable", });
    edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
