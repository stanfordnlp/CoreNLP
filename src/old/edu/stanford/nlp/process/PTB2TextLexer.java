/* The following code was generated by JFlex 1.4.1 on 1/31/08 10:20 PM */

package old.edu.stanford.nlp.process;

/** Undoes the more common cases of Penn Treebank quoting to producing
 *  something resembling normal text.  That is, it is an approximate inverse
 *  of PTBTokenizer.
 *
 *  Jan 2008: This was both made better, and some quirky weird stuff was added
 *  so as to better handle the NIST MT08 translation systems's output.
 *
 *  @author Joseph Smarr
 *  @author Christopher Manning
 */



@SuppressWarnings("unused")
class PTB2TextLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INQUOTE = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\67\2\66\1\70\22\0\1\1\1\73\1\2\1\0\1\104"+
    "\1\103\1\3\1\30\1\77\1\100\2\0\1\73\1\34\1\72\1\76"+
    "\12\33\1\73\1\7\3\0\1\74\1\0\1\4\1\62\1\56\1\60"+
    "\1\50\1\42\1\15\1\46\1\36\2\65\1\14\1\5\1\40\1\12"+
    "\1\6\1\10\1\44\1\31\1\13\1\11\1\64\1\54\1\65\1\52"+
    "\1\65\1\101\1\75\1\102\2\0\1\71\1\17\1\61\1\55\1\57"+
    "\1\47\1\41\1\27\1\45\1\35\2\16\1\26\1\20\1\37\1\24"+
    "\1\21\1\22\1\43\1\32\1\25\1\23\1\63\1\53\1\16\1\51"+
    "\1\16\12\0\1\66\u1fa2\0\2\66\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\5\1\1\4\1\1\2\5"+
    "\4\1\1\6\1\3\2\0\1\7\3\0\2\7\1\10"+
    "\1\11\1\12\7\0\4\1\1\13\1\1\1\14\1\15"+
    "\1\16\1\17\1\6\4\0\2\20\3\0\1\20\6\0"+
    "\1\2\6\0\5\1\1\21\12\0\1\22\5\0\1\3"+
    "\2\0\1\23\1\0\1\24\2\0\3\1\5\0\1\3"+
    "\5\0\1\25\3\0\2\3\1\2\13\26\1\0\1\1"+
    "\4\0\2\3\1\6\10\0\1\2\1\5\5\26\2\5"+
    "\1\0\16\26\1\0\1\1\3\0\1\6\3\0\1\6"+
    "\6\0\11\26\1\0\1\1\1\27\1\0\1\6\3\0"+
    "\5\26\1\1\3\26\1\1\1\0\1\26\1\1\1\0"+
    "\1\26\1\1\1\0\1\26\1\1\1\26\22\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u02f7\0\u03c6"+
    "\0\u040b\0\u0450\0\u0495\0\u02f7\0\u04da\0\u051f\0\u0564\0\u02f7"+
    "\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u02f7\0\u02f7\0\u02f7"+
    "\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5"+
    "\0\u092a\0\u096f\0\u09b4\0\u02f7\0\u09f9\0\u02f7\0\u02f7\0\u02f7"+
    "\0\u02f7\0\u051f\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u02f7\0\u0b52"+
    "\0\u0b97\0\u0bdc\0\u0c21\0\u02f7\0\u0c66\0\u0cab\0\u0cf0\0\u0381"+
    "\0\u0d35\0\u0d7a\0\u02f7\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3"+
    "\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u02f7\0\u10b6"+
    "\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de"+
    "\0\u1323\0\u02f7\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1"+
    "\0\u1506\0\u154b\0\u02f7\0\u1590\0\u02f7\0\u15d5\0\u161a\0\u165f"+
    "\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887"+
    "\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0\0\u02f7\0\u1a25\0\u1a6a"+
    "\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92"+
    "\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba"+
    "\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2"+
    "\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u1b39\0\u22c5"+
    "\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u02f7"+
    "\0\u24ed\0\u234f\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b"+
    "\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3"+
    "\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u2a96\0\u209d"+
    "\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u2cbe"+
    "\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6"+
    "\0\u2f2b\0\u2f70\0\u2fb5\0\u02f7\0\u2ffa\0\u303f\0\u3084\0\u30c9"+
    "\0\u310e\0\u3153\0\u3198\0\u31dd\0\u3222\0\u02f7\0\u3267\0\u32ac"+
    "\0\u32f1\0\u3336\0\u337b\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4"+
    "\0\u3519\0\u355e\0\u35a3\0\u35e8\0\u355e\0\u362d\0\u3672\0\u36b7"+
    "\0\u36fc\0\u3741\0\u3786\0\u37cb\0\u3810\0\u3855\0\u389a\0\u38df"+
    "\0\u3924\0\u3969\0\u39ae\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\3\7\1\3\6\7\12\10"+
    "\1\3\1\7\1\10\1\7\1\11\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\12\1\13\1\10"+
    "\1\7\1\10\1\7\1\10\2\7\1\3\1\14\1\3"+
    "\1\15\3\3\1\16\1\17\1\20\1\3\1\21\2\3"+
    "\1\22\1\3\1\23\1\24\1\25\3\7\1\3\6\7"+
    "\12\10\1\3\1\7\1\10\1\7\1\11\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\12\1\13"+
    "\1\10\1\7\1\10\1\7\1\10\2\7\1\3\1\14"+
    "\1\3\1\15\3\3\1\16\1\17\1\20\1\3\1\21"+
    "\2\3\1\22\1\3\3\0\63\3\1\0\5\3\2\0"+
    "\6\3\2\0\1\26\1\27\3\0\1\30\20\0\1\31"+
    "\3\0\1\32\2\0\2\33\31\0\1\34\1\30\1\35"+
    "\3\0\1\36\1\0\1\37\1\40\2\0\1\41\104\0"+
    "\1\42\2\0\1\43\3\0\1\44\3\0\1\45\1\46"+
    "\1\0\1\43\2\0\1\44\3\0\1\45\1\46\55\0"+
    "\1\3\1\47\2\0\3\7\1\3\20\7\1\3\3\7"+
    "\1\3\31\7\1\3\1\0\5\3\2\0\7\3\1\47"+
    "\2\0\3\7\1\3\6\7\12\50\1\3\1\7\1\50"+
    "\1\7\1\3\1\50\1\7\1\50\1\7\1\50\1\7"+
    "\1\50\1\7\1\50\1\7\1\50\1\7\1\50\1\7"+
    "\1\50\1\7\1\50\1\7\1\50\1\7\1\50\1\7"+
    "\1\50\2\7\1\3\1\0\5\3\2\0\7\3\3\0"+
    "\10\3\1\51\11\3\1\51\40\3\1\0\5\3\2\0"+
    "\7\3\1\47\2\0\1\52\2\7\1\3\6\7\1\50"+
    "\1\53\10\50\1\3\1\7\1\50\1\7\1\3\1\50"+
    "\1\7\1\50\1\7\1\50\1\7\1\50\1\7\1\50"+
    "\1\7\1\50\1\7\1\50\1\7\1\50\1\7\1\50"+
    "\1\7\1\50\1\7\1\50\1\7\1\50\2\7\1\3"+
    "\1\0\5\3\2\0\7\3\1\47\2\0\1\52\2\7"+
    "\1\3\7\7\1\52\10\7\1\3\3\7\1\3\31\7"+
    "\1\3\1\0\5\3\2\0\6\3\105\0\1\3\1\54"+
    "\2\0\63\3\1\0\1\3\1\55\3\3\2\0\6\3"+
    "\76\0\1\56\6\0\1\3\1\57\2\0\63\3\1\0"+
    "\5\3\2\0\7\3\1\60\2\0\63\3\1\0\5\3"+
    "\2\0\7\3\1\61\2\0\63\3\1\0\5\3\2\0"+
    "\6\3\2\0\1\62\1\63\3\0\1\30\20\0\1\31"+
    "\3\0\1\32\2\0\2\33\31\0\1\34\1\30\1\35"+
    "\3\0\1\36\1\0\1\37\1\40\2\0\1\64\2\0"+
    "\1\65\3\0\1\66\3\0\1\45\1\46\1\0\1\65"+
    "\2\0\1\66\3\0\1\45\1\46\143\0\2\67\1\70"+
    "\15\0\1\71\2\0\1\72\3\0\1\73\6\0\1\72"+
    "\2\0\1\73\62\0\30\30\1\74\36\30\1\0\15\30"+
    "\43\0\2\75\70\0\1\76\146\0\1\77\107\0\1\100"+
    "\11\0\1\101\1\102\3\103\1\0\20\103\1\0\2\103"+
    "\2\0\31\103\23\0\1\104\3\0\1\44\6\0\1\104"+
    "\2\0\1\44\67\0\1\105\12\0\1\105\75\0\1\106"+
    "\11\0\1\106\74\0\1\107\11\0\1\107\72\0\1\110"+
    "\11\0\1\110\113\0\1\111\50\0\1\3\1\47\2\0"+
    "\3\7\1\3\6\7\12\112\1\3\1\7\1\112\1\7"+
    "\1\3\1\112\1\7\1\112\1\7\1\112\1\7\1\112"+
    "\1\7\1\112\1\7\1\112\1\7\1\112\1\7\1\112"+
    "\1\7\1\112\1\7\1\112\1\7\1\112\1\7\1\112"+
    "\2\7\1\3\1\0\5\3\2\0\7\3\3\0\37\3"+
    "\2\113\10\3\2\114\10\3\1\0\5\3\2\0\7\3"+
    "\1\47\2\0\3\7\1\3\20\7\1\3\3\7\1\3"+
    "\2\7\2\115\25\7\1\3\1\0\5\3\2\0\7\3"+
    "\1\47\2\0\3\7\1\3\6\7\12\112\1\3\1\7"+
    "\1\112\1\7\1\3\1\112\1\7\1\116\1\115\1\112"+
    "\1\7\1\112\1\7\1\112\1\7\1\112\1\7\1\112"+
    "\1\7\1\112\1\7\1\112\1\7\1\112\1\7\1\112"+
    "\1\7\1\112\2\7\1\3\1\0\5\3\2\0\7\3"+
    "\1\117\2\0\63\3\1\0\5\3\2\0\6\3\1\0"+
    "\1\120\2\0\1\121\3\0\1\122\6\0\1\121\2\0"+
    "\1\122\66\0\1\123\3\0\1\66\6\0\1\123\2\0"+
    "\1\66\67\0\1\124\12\0\1\124\75\0\1\125\11\0"+
    "\1\125\150\0\1\67\21\0\1\72\3\0\1\73\6\0"+
    "\1\72\2\0\1\73\67\0\1\126\12\0\1\126\75\0"+
    "\1\127\11\0\1\127\124\0\2\130\10\0\2\131\41\0"+
    "\1\132\11\0\1\132\151\0\1\30\13\0\1\133\104\0"+
    "\1\134\2\0\1\135\3\0\1\136\6\0\1\135\2\0"+
    "\1\136\67\0\1\137\12\0\1\137\72\0\1\140\12\0"+
    "\1\140\75\0\1\141\11\0\1\141\61\0\1\142\5\0"+
    "\1\143\76\0\1\144\5\0\1\145\76\0\1\146\103\0"+
    "\1\3\1\147\2\0\3\7\1\3\6\7\12\150\1\3"+
    "\1\7\1\150\1\7\1\3\1\150\1\7\1\150\1\7"+
    "\1\150\1\7\1\150\1\7\1\150\1\7\1\150\1\7"+
    "\1\150\1\7\1\150\1\7\1\150\1\7\1\150\1\7"+
    "\1\150\1\7\1\150\2\7\1\3\1\0\5\3\2\0"+
    "\7\3\3\0\55\3\2\151\4\3\1\0\5\3\2\0"+
    "\7\3\3\0\55\3\2\152\4\3\1\0\5\3\2\0"+
    "\7\3\1\153\2\0\3\7\1\3\20\7\1\3\3\7"+
    "\1\3\31\7\1\3\1\0\5\3\2\0\7\3\1\154"+
    "\2\0\3\7\1\3\6\7\12\150\1\3\1\7\1\150"+
    "\1\7\1\3\1\150\1\7\1\150\1\7\1\150\1\7"+
    "\1\150\1\7\1\150\1\7\1\150\1\7\1\150\1\7"+
    "\1\150\1\7\1\150\1\7\1\150\1\7\1\150\1\7"+
    "\1\150\2\7\1\3\1\0\5\3\2\0\6\3\4\0"+
    "\1\121\3\0\1\122\6\0\1\121\2\0\1\122\67\0"+
    "\1\155\12\0\1\155\75\0\1\156\11\0\1\156\66\0"+
    "\1\157\12\0\1\157\72\0\1\160\12\0\1\160\75\0"+
    "\1\161\11\0\1\161\66\0\1\162\12\0\1\162\75\0"+
    "\1\163\11\0\1\163\141\0\2\164\103\0\2\165\26\0"+
    "\3\166\1\0\20\166\1\0\2\166\2\0\31\166\23\0"+
    "\1\135\3\0\1\136\6\0\1\135\2\0\1\136\67\0"+
    "\1\167\12\0\1\167\75\0\1\170\11\0\1\170\67\0"+
    "\1\171\12\0\1\171\64\0\1\172\5\0\1\173\110\0"+
    "\1\174\11\0\1\174\66\0\1\143\104\0\1\145\101\0"+
    "\1\175\2\176\1\0\2\176\1\177\1\200\3\176\1\175"+
    "\4\176\1\177\1\200\2\176\1\0\2\201\2\0\2\202"+
    "\2\176\2\203\2\176\2\204\2\176\2\205\2\206\4\176"+
    "\2\207\3\176\47\0\1\210\3\0\1\111\50\0\1\3"+
    "\1\147\2\0\3\7\1\3\6\7\12\211\1\3\1\7"+
    "\1\211\1\7\1\3\1\211\1\7\1\211\1\7\1\211"+
    "\1\7\1\211\1\7\1\211\1\7\1\211\1\7\1\211"+
    "\1\7\1\211\1\7\1\211\1\7\1\211\1\7\1\211"+
    "\1\7\1\211\2\7\1\3\1\0\5\3\2\0\7\3"+
    "\3\0\30\3\1\20\32\3\1\0\5\3\2\0\7\3"+
    "\3\0\30\3\1\21\32\3\1\0\5\3\2\0\6\3"+
    "\34\0\1\111\2\0\2\212\74\0\1\210\3\0\1\111"+
    "\2\0\2\212\52\0\1\213\12\0\1\213\75\0\1\214"+
    "\11\0\1\214\66\0\1\215\12\0\1\215\64\0\1\216"+
    "\5\0\1\217\110\0\1\220\11\0\1\220\60\0\1\221"+
    "\5\0\1\222\110\0\1\223\11\0\1\223\113\0\1\36"+
    "\104\0\1\37\56\0\1\224\12\0\1\224\75\0\1\225"+
    "\11\0\1\225\61\0\1\226\5\0\1\227\104\0\1\173"+
    "\76\0\1\230\6\0\1\44\11\0\1\44\63\0\1\231"+
    "\5\0\1\5\76\0\1\232\2\0\3\176\1\0\3\176"+
    "\1\233\11\176\1\233\2\176\1\0\2\233\2\0\2\176"+
    "\2\234\2\235\2\236\10\176\2\237\7\176\2\240\1\241"+
    "\15\0\1\242\2\0\3\176\1\0\20\176\1\0\2\176"+
    "\2\0\31\176\20\0\1\242\2\0\3\176\1\0\20\176"+
    "\1\0\2\176\2\0\2\176\2\243\25\176\20\0\1\242"+
    "\2\0\3\176\1\0\2\176\1\233\11\176\1\233\3\176"+
    "\1\0\2\176\2\0\10\176\2\244\17\176\20\0\1\242"+
    "\2\0\3\176\1\0\1\176\1\245\1\246\10\176\1\245"+
    "\1\246\3\176\1\0\2\176\2\0\10\176\2\247\17\176"+
    "\20\0\1\242\2\0\3\176\1\0\20\176\1\0\2\233"+
    "\2\0\2\176\2\250\25\176\20\0\1\242\2\0\3\176"+
    "\1\0\2\176\1\251\11\176\1\251\3\176\1\0\2\176"+
    "\2\0\31\176\20\0\1\242\2\0\1\252\2\176\1\0"+
    "\7\176\1\252\10\176\1\0\2\176\2\0\12\176\2\253"+
    "\15\176\20\0\1\242\2\0\3\176\1\0\2\176\1\254"+
    "\11\176\1\254\3\176\1\0\2\176\2\0\31\176\20\0"+
    "\1\242\2\0\1\255\2\176\1\0\2\176\1\256\4\176"+
    "\1\255\4\176\1\256\3\176\1\0\2\176\2\0\10\176"+
    "\2\257\2\253\15\176\20\0\1\242\2\0\3\176\1\0"+
    "\20\176\1\0\2\176\2\0\12\176\2\260\15\176\20\0"+
    "\1\261\103\0\1\3\1\147\2\0\3\7\1\3\6\7"+
    "\12\262\1\3\1\7\1\262\1\7\1\3\1\262\1\7"+
    "\1\262\1\7\1\262\1\7\1\262\1\7\1\262\1\7"+
    "\1\262\1\7\1\262\1\7\1\262\1\7\1\262\1\7"+
    "\1\262\1\7\1\262\1\7\1\262\2\7\1\3\1\0"+
    "\5\3\2\0\6\3\12\0\1\263\11\0\1\263\61\0"+
    "\1\264\5\0\1\265\110\0\1\266\11\0\1\266\60\0"+
    "\1\267\5\0\1\270\104\0\1\217\76\0\1\271\6\0"+
    "\1\66\11\0\1\66\63\0\1\272\5\0\1\24\104\0"+
    "\1\222\76\0\1\273\6\0\1\73\11\0\1\73\63\0"+
    "\1\274\5\0\1\26\56\0\2\67\1\70\15\0\1\275"+
    "\5\0\1\276\110\0\1\277\11\0\1\277\66\0\1\227"+
    "\105\0\1\44\11\0\1\44\63\0\1\41\1\101\1\102"+
    "\3\103\1\5\20\103\1\0\2\103\2\0\31\103\53\0"+
    "\1\300\51\0\1\232\2\0\3\176\1\0\20\176\1\0"+
    "\2\176\2\0\31\176\2\240\1\241\15\0\1\242\2\0"+
    "\3\176\1\0\20\176\1\0\2\176\2\0\22\176\2\233"+
    "\5\176\20\0\1\242\2\0\3\176\1\0\3\176\1\301"+
    "\11\176\1\301\2\176\1\0\2\176\2\0\31\176\20\0"+
    "\1\242\2\0\3\176\1\0\20\176\1\0\2\176\2\0"+
    "\12\176\2\233\15\176\20\0\1\242\2\0\3\176\1\0"+
    "\20\176\1\0\2\176\2\0\20\176\2\302\7\176\106\0"+
    "\1\240\16\0\1\232\2\0\3\176\1\0\20\176\1\0"+
    "\2\176\2\0\12\176\2\233\15\176\2\240\1\241\15\0"+
    "\1\242\2\0\1\303\2\176\1\0\1\176\1\255\1\304"+
    "\4\176\1\303\3\176\1\255\1\304\3\176\1\0\2\176"+
    "\2\0\2\255\10\176\2\305\15\176\20\0\1\242\2\0"+
    "\3\176\1\0\20\176\1\0\2\176\2\0\20\176\2\306"+
    "\7\176\20\0\1\232\2\0\1\176\1\236\1\176\1\0"+
    "\10\176\1\236\7\176\1\0\2\176\2\0\31\176\2\240"+
    "\1\241\15\0\1\242\2\0\3\176\1\0\2\176\1\256"+
    "\11\176\1\256\3\176\1\0\2\176\2\0\12\176\2\233"+
    "\15\176\20\0\1\232\2\0\3\176\1\0\20\176\1\0"+
    "\2\176\2\0\20\176\2\307\7\176\2\240\1\241\15\0"+
    "\1\242\2\0\3\176\1\0\20\176\1\0\2\176\2\0"+
    "\6\176\2\233\21\176\20\0\1\242\2\0\3\176\1\0"+
    "\20\176\1\0\2\233\2\0\26\176\2\236\1\176\20\0"+
    "\1\232\2\0\3\176\1\0\20\176\1\0\2\176\2\0"+
    "\6\176\2\236\21\176\2\240\1\241\15\0\1\242\2\0"+
    "\3\176\1\0\1\176\1\233\11\176\1\233\4\176\1\0"+
    "\2\176\2\0\31\176\20\0\1\242\2\0\3\176\1\0"+
    "\20\176\1\0\2\233\2\0\31\176\20\0\1\242\2\0"+
    "\3\176\1\0\1\176\1\310\11\176\1\310\4\176\1\0"+
    "\2\176\2\0\31\176\20\0\1\242\2\0\3\176\1\0"+
    "\2\176\1\233\11\176\1\233\3\176\1\0\2\176\2\0"+
    "\2\245\27\176\20\0\1\242\2\0\3\176\1\0\20\176"+
    "\1\0\2\176\2\0\4\176\2\311\23\176\50\0\2\312"+
    "\52\0\1\3\1\147\2\0\3\7\1\3\6\7\12\313"+
    "\1\3\1\7\1\313\1\7\1\3\1\313\1\7\1\313"+
    "\1\7\1\313\1\7\1\313\1\7\1\313\1\7\1\313"+
    "\1\7\1\313\1\7\1\313\1\7\1\313\1\7\1\313"+
    "\1\7\1\313\1\7\1\313\2\7\1\3\1\0\5\3"+
    "\2\0\6\3\13\0\1\314\11\0\1\314\66\0\1\265"+
    "\76\0\1\315\6\0\1\122\11\0\1\122\63\0\1\316"+
    "\5\0\1\62\56\0\2\67\1\70\23\0\1\270\105\0"+
    "\1\66\11\0\1\66\71\0\1\24\105\0\1\73\11\0"+
    "\1\73\71\0\1\26\56\0\2\67\1\70\23\0\1\276"+
    "\76\0\1\317\6\0\1\136\11\0\1\136\63\0\1\320"+
    "\5\0\1\101\76\0\1\321\104\0\1\242\2\0\3\176"+
    "\1\0\20\176\1\0\2\176\2\0\12\176\2\251\15\176"+
    "\20\0\1\242\2\0\3\176\1\0\2\176\1\322\11\176"+
    "\1\322\3\176\1\0\2\176\2\0\31\176\20\0\1\242"+
    "\2\0\3\176\1\0\3\176\1\233\11\176\1\233\2\176"+
    "\1\0\2\176\2\0\31\176\20\0\1\242\2\0\3\176"+
    "\1\0\20\176\1\0\2\236\2\0\31\176\20\0\1\232"+
    "\2\0\3\176\1\0\20\176\1\0\2\236\2\0\6\176"+
    "\2\323\4\176\2\233\13\176\2\240\1\241\15\0\1\242"+
    "\2\0\3\176\1\0\20\176\1\0\2\176\2\0\10\176"+
    "\2\233\17\176\20\0\1\242\2\0\3\176\1\0\4\176"+
    "\1\324\11\176\1\324\1\176\1\0\2\176\2\0\31\176"+
    "\20\0\1\242\2\0\3\176\1\0\4\176\1\234\11\176"+
    "\1\234\1\176\1\0\2\176\2\0\31\176\20\0\1\242"+
    "\2\0\3\176\1\0\2\176\1\325\11\176\1\325\3\176"+
    "\1\0\2\176\2\0\31\176\20\0\1\326\103\0\1\3"+
    "\1\147\2\0\3\7\1\3\6\7\12\327\1\3\1\7"+
    "\1\327\1\7\1\3\1\327\1\7\1\327\1\7\1\327"+
    "\1\7\1\327\1\7\1\327\1\7\1\327\1\7\1\327"+
    "\1\7\1\327\1\7\1\327\1\7\1\327\1\7\1\327"+
    "\1\7\1\327\2\7\1\3\1\0\5\3\2\0\6\3"+
    "\10\0\1\122\11\0\1\122\71\0\1\62\56\0\2\67"+
    "\1\70\24\0\1\136\11\0\1\136\63\0\1\133\2\0"+
    "\3\166\1\101\20\166\1\0\2\166\2\0\31\166\23\0"+
    "\3\330\1\0\20\330\1\0\2\330\2\0\31\330\20\0"+
    "\1\242\2\0\3\176\1\0\20\176\1\0\2\176\2\0"+
    "\6\176\2\331\21\176\20\0\1\242\2\0\3\176\1\0"+
    "\20\176\1\0\2\176\2\0\12\176\2\332\15\176\20\0"+
    "\1\242\2\0\3\176\1\0\1\176\1\331\11\176\1\331"+
    "\4\176\1\0\2\176\2\0\31\176\20\0\1\242\2\0"+
    "\3\176\1\0\20\176\1\0\2\176\2\0\6\176\2\236"+
    "\21\176\17\0\1\3\1\147\2\0\3\7\1\3\6\7"+
    "\12\333\1\3\1\7\1\333\1\7\1\3\1\333\1\7"+
    "\1\333\1\7\1\333\1\7\1\333\1\7\1\333\1\7"+
    "\1\333\1\7\1\333\1\7\1\333\1\7\1\333\1\7"+
    "\1\333\1\7\1\333\1\7\1\333\2\7\1\3\1\0"+
    "\5\3\2\0\6\3\1\0\1\334\2\0\3\330\1\0"+
    "\20\330\1\0\2\330\2\0\31\330\20\0\1\242\2\0"+
    "\3\176\1\0\20\176\1\0\2\176\2\0\22\176\2\335"+
    "\5\176\20\0\1\232\2\0\3\176\1\0\20\176\1\0"+
    "\2\176\2\0\4\176\2\311\23\176\2\240\1\241\14\0"+
    "\1\3\1\147\2\0\3\7\1\3\6\7\12\336\1\3"+
    "\1\7\1\336\1\7\1\3\1\336\1\7\1\336\1\7"+
    "\1\336\1\7\1\336\1\7\1\336\1\7\1\336\1\7"+
    "\1\336\1\7\1\336\1\7\1\336\1\7\1\336\1\7"+
    "\1\336\1\7\1\336\2\7\1\3\1\0\5\3\2\0"+
    "\6\3\34\0\1\337\51\0\1\242\2\0\3\176\1\0"+
    "\20\176\1\0\2\176\2\0\2\340\27\176\17\0\1\3"+
    "\1\147\2\0\3\7\1\3\6\7\12\341\1\3\1\7"+
    "\1\341\1\7\1\3\1\341\1\7\1\341\1\7\1\341"+
    "\1\7\1\341\1\7\1\341\1\7\1\341\1\7\1\341"+
    "\1\7\1\341\1\7\1\341\1\7\1\341\1\7\1\341"+
    "\1\7\1\341\2\7\1\3\1\0\5\3\2\0\6\3"+
    "\1\0\1\342\104\0\1\242\2\0\3\176\1\0\20\176"+
    "\1\0\2\176\2\0\2\176\2\343\25\176\17\0\1\3"+
    "\1\147\2\0\3\7\1\3\6\7\12\344\1\3\1\7"+
    "\1\344\1\7\1\3\1\344\1\7\1\344\1\7\1\344"+
    "\1\7\1\344\1\7\1\344\1\7\1\344\1\7\1\344"+
    "\1\7\1\344\1\7\1\344\1\7\1\344\1\7\1\344"+
    "\1\7\1\344\2\7\1\3\1\0\5\3\2\0\6\3"+
    "\4\0\3\345\1\0\20\345\1\0\2\345\2\0\31\345"+
    "\20\0\1\242\2\0\3\176\1\0\5\176\1\233\11\176"+
    "\1\233\1\0\2\176\2\0\31\176\17\0\1\3\1\147"+
    "\2\0\3\7\1\3\6\7\12\346\1\3\1\7\1\346"+
    "\1\7\1\3\1\346\1\7\1\346\1\7\1\346\1\7"+
    "\1\346\1\7\1\346\1\7\1\346\1\7\1\346\1\7"+
    "\1\346\1\7\1\346\1\7\1\346\1\7\1\346\1\7"+
    "\1\346\2\7\1\3\1\0\5\3\2\0\7\3\1\147"+
    "\2\0\3\7\1\3\6\7\12\347\1\3\1\7\1\347"+
    "\1\7\1\3\1\347\1\7\1\347\1\7\1\347\1\7"+
    "\1\347\1\7\1\347\1\7\1\347\1\7\1\347\1\7"+
    "\1\347\1\7\1\347\1\7\1\347\1\7\1\347\1\7"+
    "\1\347\2\7\1\3\1\0\5\3\2\0\7\3\1\147"+
    "\2\0\3\7\1\3\6\7\12\350\1\3\1\7\1\350"+
    "\1\7\1\3\1\350\1\7\1\350\1\7\1\350\1\7"+
    "\1\350\1\7\1\350\1\7\1\350\1\7\1\350\1\7"+
    "\1\350\1\7\1\350\1\7\1\350\1\7\1\350\1\7"+
    "\1\350\2\7\1\3\1\0\5\3\2\0\7\3\1\147"+
    "\2\0\3\7\1\3\6\7\12\351\1\3\1\7\1\351"+
    "\1\7\1\3\1\351\1\7\1\351\1\7\1\351\1\7"+
    "\1\351\1\7\1\351\1\7\1\351\1\7\1\351\1\7"+
    "\1\351\1\7\1\351\1\7\1\351\1\7\1\351\1\7"+
    "\1\351\2\7\1\3\1\0\5\3\2\0\7\3\1\147"+
    "\2\0\3\7\1\3\6\7\12\352\1\3\1\7\1\352"+
    "\1\7\1\3\1\352\1\7\1\352\1\7\1\352\1\7"+
    "\1\352\1\7\1\352\1\7\1\352\1\7\1\352\1\7"+
    "\1\352\1\7\1\352\1\7\1\352\1\7\1\352\1\7"+
    "\1\352\2\7\1\3\1\0\5\3\2\0\7\3\1\147"+
    "\2\0\3\7\1\3\6\7\12\353\1\3\1\7\1\353"+
    "\1\7\1\3\1\353\1\7\1\353\1\7\1\353\1\7"+
    "\1\353\1\7\1\353\1\7\1\353\1\7\1\353\1\7"+
    "\1\353\1\7\1\353\1\7\1\353\1\7\1\353\1\7"+
    "\1\353\2\7\1\3\1\0\5\3\2\0\7\3\1\147"+
    "\2\0\3\7\1\3\6\7\12\354\1\3\1\7\1\354"+
    "\1\7\1\3\1\354\1\7\1\354\1\7\1\354\1\7"+
    "\1\354\1\7\1\354\1\7\1\354\1\7\1\354\1\7"+
    "\1\354\1\7\1\354\1\7\1\354\1\7\1\354\1\7"+
    "\1\354\2\7\1\3\1\0\5\3\2\0\7\3\1\147"+
    "\2\0\3\7\1\3\6\7\12\355\1\3\1\7\1\355"+
    "\1\7\1\3\1\355\1\7\1\355\1\7\1\355\1\7"+
    "\1\355\1\7\1\355\1\7\1\355\1\7\1\355\1\7"+
    "\1\355\1\7\1\355\1\7\1\355\1\7\1\355\1\7"+
    "\1\355\2\7\1\3\1\0\5\3\2\0\7\3\1\147"+
    "\2\0\3\7\1\3\6\7\12\356\1\3\1\7\1\356"+
    "\1\7\1\3\1\356\1\7\1\356\1\7\1\356\1\7"+
    "\1\356\1\7\1\356\1\7\1\356\1\7\1\356\1\7"+
    "\1\356\1\7\1\356\1\7\1\356\1\7\1\356\1\7"+
    "\1\356\2\7\1\3\1\0\5\3\2\0\7\3\1\147"+
    "\2\0\3\7\1\3\6\7\12\357\1\3\1\7\1\357"+
    "\1\7\1\3\1\357\1\7\1\357\1\7\1\357\1\7"+
    "\1\357\1\7\1\357\1\7\1\357\1\7\1\357\1\7"+
    "\1\357\1\7\1\357\1\7\1\357\1\7\1\357\1\7"+
    "\1\357\2\7\1\3\1\0\5\3\2\0\7\3\1\147"+
    "\2\0\3\7\1\3\6\7\12\360\1\3\1\7\1\360"+
    "\1\7\1\3\1\360\1\7\1\360\1\7\1\360\1\7"+
    "\1\360\1\7\1\360\1\7\1\360\1\7\1\360\1\7"+
    "\1\360\1\7\1\360\1\7\1\360\1\7\1\360\1\7"+
    "\1\360\2\7\1\3\1\0\5\3\2\0\7\3\1\147"+
    "\2\0\3\7\1\3\6\7\12\361\1\3\1\7\1\361"+
    "\1\7\1\3\1\361\1\7\1\361\1\7\1\361\1\7"+
    "\1\361\1\7\1\361\1\7\1\361\1\7\1\361\1\7"+
    "\1\361\1\7\1\361\1\7\1\361\1\7\1\361\1\7"+
    "\1\361\2\7\1\3\1\0\5\3\2\0\7\3\1\147"+
    "\2\0\3\7\1\3\6\7\12\362\1\3\1\7\1\362"+
    "\1\7\1\3\1\362\1\7\1\362\1\7\1\362\1\7"+
    "\1\362\1\7\1\362\1\7\1\362\1\7\1\362\1\7"+
    "\1\362\1\7\1\362\1\7\1\362\1\7\1\362\1\7"+
    "\1\362\2\7\1\3\1\0\5\3\2\0\7\3\1\147"+
    "\2\0\3\7\1\3\6\7\12\363\1\3\1\7\1\363"+
    "\1\7\1\3\1\363\1\7\1\363\1\7\1\363\1\7"+
    "\1\363\1\7\1\363\1\7\1\363\1\7\1\363\1\7"+
    "\1\363\1\7\1\363\1\7\1\363\1\7\1\363\1\7"+
    "\1\363\2\7\1\3\1\0\5\3\2\0\7\3\1\147"+
    "\2\0\3\7\1\3\6\7\12\364\1\3\1\7\1\364"+
    "\1\7\1\3\1\364\1\7\1\364\1\7\1\364\1\7"+
    "\1\364\1\7\1\364\1\7\1\364\1\7\1\364\1\7"+
    "\1\364\1\7\1\364\1\7\1\364\1\7\1\364\1\7"+
    "\1\364\2\7\1\3\1\0\5\3\2\0\7\3\1\147"+
    "\2\0\3\7\1\3\6\7\12\365\1\3\1\7\1\365"+
    "\1\7\1\3\1\365\1\7\1\365\1\7\1\365\1\7"+
    "\1\365\1\7\1\365\1\7\1\365\1\7\1\365\1\7"+
    "\1\365\1\7\1\365\1\7\1\365\1\7\1\365\1\7"+
    "\1\365\2\7\1\3\1\0\5\3\2\0\7\3\1\147"+
    "\2\0\3\7\1\3\6\7\12\366\1\3\1\7\1\366"+
    "\1\7\1\3\1\366\1\7\1\366\1\7\1\366\1\7"+
    "\1\366\1\7\1\366\1\7\1\366\1\7\1\366\1\7"+
    "\1\366\1\7\1\366\1\7\1\366\1\7\1\366\1\7"+
    "\1\366\2\7\1\3\1\0\5\3\2\0\7\3\1\147"+
    "\2\0\3\7\1\3\6\7\12\367\1\3\1\7\1\367"+
    "\1\7\1\3\1\367\1\7\1\367\1\7\1\367\1\7"+
    "\1\367\1\7\1\367\1\7\1\367\1\7\1\367\1\7"+
    "\1\367\1\7\1\367\1\7\1\367\1\7\1\367\1\7"+
    "\1\367\2\7\1\3\1\0\5\3\2\0\7\3\1\147"+
    "\2\0\3\7\1\3\20\7\1\3\3\7\1\3\31\7"+
    "\1\3\1\0\5\3\2\0\6\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15111];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\11\1\1\11\2\1\1\11\4\1\1\11\1\1"+
    "\1\2\1\0\1\11\3\0\2\1\3\11\1\2\6\0"+
    "\4\1\1\11\1\1\4\11\1\3\4\0\1\15\1\5"+
    "\3\0\1\11\6\0\1\15\6\0\5\1\1\11\12\0"+
    "\1\11\1\2\4\0\1\1\2\0\1\11\1\0\1\11"+
    "\2\0\3\1\5\0\1\1\5\0\1\15\3\0\3\1"+
    "\1\3\12\1\1\0\1\1\4\0\3\1\2\0\1\2"+
    "\5\0\1\3\1\5\1\3\4\1\1\15\1\5\1\0"+
    "\1\3\2\1\1\3\1\1\1\3\2\1\1\3\5\1"+
    "\1\0\1\1\3\0\1\3\3\0\1\1\1\0\1\2"+
    "\4\0\4\1\1\3\4\1\1\2\1\1\1\11\1\0"+
    "\1\3\1\0\1\2\1\0\4\1\1\15\3\1\1\3"+
    "\1\1\1\0\2\1\1\0\2\1\1\0\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

/*
"'T WAS"
{ return("'TWAS"); }
"'T was"
{ return("'Twas"); }
"'t was"
{ return("'twas"); }
"'T IS"
{ return("'TIS"); }
"'T is"
{ return("'Tis"); }
"'t is"
{ return("'tis"); }
*/

  private static String removeWhite(String in) {
    StringBuilder out = new StringBuilder();
    for (int i = 0, len = in.length(); i < len; i++) {
      char ch = in.charAt(i);
      if (ch != ' ') {
        out.append(ch);
      }
    }
    return out.toString();
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PTB2TextLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PTB2TextLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String next() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { return("]");
          }
        case 24: break;
        case 18: 
          { return("n't");
          }
        case 25: break;
        case 12: 
          { return "/";
          }
        case 26: break;
        case 5: 
          { return yytext();
          }
        case 27: break;
        case 3: 
          { return "&";
          }
        case 28: break;
        case 6: 
          { yybegin(YYINITIAL); return "\"";
          }
        case 29: break;
        case 13: 
          { return "(";
          }
        case 30: break;
        case 8: 
          { return(")");
          }
        case 31: break;
        case 19: 
          { return "<";
          }
        case 32: break;
        case 20: 
          { return ">";
          }
        case 33: break;
        case 23: 
          { return "cannot";
          }
        case 34: break;
        case 1: 
          { return(yytext());
          }
        case 35: break;
        case 16: 
          { return "\"";
          }
        case 36: break;
        case 11: 
          { return("`");
          }
        case 37: break;
        case 17: 
          { return("\"");
          }
        case 38: break;
        case 15: 
          { return("$");
          }
        case 39: break;
        case 7: 
          { return(yytext().substring(1, yytext().length()));
          }
        case 40: break;
        case 21: 
          { yybegin(INQUOTE); return "\" \"";
          }
        case 41: break;
        case 10: 
          { return("%");
          }
        case 42: break;
        case 14: 
          { return("[");
          }
        case 43: break;
        case 4: 
          { yybegin(YYINITIAL); return(yytext());
          }
        case 44: break;
        case 22: 
          { return removeWhite(yytext());
          }
        case 45: break;
        case 2: 
          { yybegin(INQUOTE); return "\"";
          }
        case 46: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
