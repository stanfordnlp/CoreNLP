// javacc "-OUTPUT_DIRECTORY=src/edu/stanford/nlp/semgraph/semgrex" src/edu/stanford/nlp/semgraph/semgrex/SemgrexParser.jj

options { UNICODE_INPUT = true;
          SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
          STATIC = false; }


PARSER_BEGIN(SemgrexParser)
package edu.stanford.nlp.semgraph.semgrex;
// all generated classes are in this package

//imports
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.*;
import edu.stanford.nlp.util.Generics;
import edu.stanford.nlp.util.logging.Redwood;

class SemgrexParser {

  // this is so we can tell, at any point during the parse
  // whether we are under a negation, which we need to know
  // because labeling nodes under negation is illegal
  private boolean underNegation = false;
  private boolean underNodeNegation = false;
  // keep track of which variables we've already seen
  // lets us make sure we don't name new nodes under a negation
  private Set<String> knownVariables = Generics.newHashSet();

  private static final Redwood.RedwoodChannels log = Redwood.channels(SemgrexParser.class);
  private boolean deprecatedAmp = false;
  private boolean deprecatedNodeConj = false;

  private String fullExpression(Token startToken) {
    StringBuilder result = new StringBuilder();
    for (Token p = startToken; p != null; p = p.next) {
      if (p.specialToken != null) {
        result.append(p.specialToken.image);
      }
      result.append(p.image);
    }
    return result.toString();
  }

  private void warnDeprecated(String warning, Token startToken) {
    StringWriter sw = new StringWriter();
    PrintWriter pw = new PrintWriter(sw);
    (new RuntimeException()).printStackTrace(pw);
    String trace = sw.toString();
    trace = trace.substring(trace.lastIndexOf("SemgrexParser"));
    trace = trace.substring(trace.indexOf("at "));
    log.warn(warning + "\n    " + fullExpression(startToken) + "\n    Current stack: " + trace);
  }
}

PARSER_END(SemgrexParser)

SPECIAL_TOKEN:
{
	< WHITESPACE: (" " | "\r" | "\t")+ >
}

TOKEN:
{
	< RELATION: "<" | ">" | ">>" | "<<" | "==" | "$+" | "$-" | "$++" | "$--" | "." >
|	< ALIGNRELN: "@" >
|	< IDENTIFIER: (~[" ", "\n", "\r", "(", "/", "|", "@", "!", "#", "%", "&", ")", "=", "?", "[", "]", ">", "<", "~", ".", ",", "$", ":", ";", "{", "}", "+", "-"])+ >
|	< NUMBER: ( ["0"-"9"] )+ >
|	< EMPTY: "#" >
|	< ROOT: "$" >
|	< REGEX: "/" ("\\/"|~["\n","\r","/"])* "/" >
}

SemgrexPattern Root() : {
  // Root pattern for the semgrex parser.  Doesn't necessarily represent matching the root.
  SemgrexPattern node;
  Token reverse = null;
  List<SemgrexPattern> children = new ArrayList<SemgrexPattern>();
  Token startToken = null;
  // a local variable
} {
  {
    // start from 1 since we haven't parsed anything yet
    startToken = getToken(1);
  }
  (
    (reverse = <ALIGNRELN> node = SubNode(GraphRelation.ALIGNED_ROOT) "\n")
    |
    ( node = SubNode(GraphRelation.ROOT) { children.add(node); }
      ( ":" node = SubNode(GraphRelation.ITERATOR) { children.add(node); } )*
      "\n"
    )
  )
  {
    if (children.size() > 1)
      node = new CoordinationPattern(true, children, true, true);
    if (deprecatedAmp) {
      throw new SemgrexParseException("Use of & in semgrex patterns is now illegal.  It is equivalent to the same expression without the &.  Offending expression: " + startToken);
    }
    if (deprecatedNodeConj) {
      throw new SemgrexParseException("Use of node conjugation (expressions such as '< [foo bar]' or '< [foo & bar]') is now illegal.  The issue is that expressions such as '[foo bar] < zzz' may intuitively mean that foo < zzz, bar < zzz, zzz the same for both cases, but that is not the way the parser interpreted this expression.  Changing the functionality might break existing expressions, and anyway this can be rewritten in various ways such as 'zzz > foo > bar' or 'foo < zzz=a : bar < zzz=a'.  Offending expression: " + startToken);
    }
    return node;
  }

}

SemgrexPattern SubNode(GraphRelation r) : {
	SemgrexPattern result =  null;
	SemgrexPattern child = null;
} {
	( "(" result = SubNode(r) ")" ( child = RelationDisj() )? )
	{
		if (child != null) {
		List<SemgrexPattern> newChildren = new ArrayList<SemgrexPattern>();
		newChildren.addAll(result.getChildren());
		newChildren.add(child);
		result.setChild(new CoordinationPattern(false, newChildren, true, false));
	}
	return result;
    }
 | ( result = ModNode(r) (child = RelationDisj() )? )
 	{  if (child != null) result.setChild(child);
 		return result;}
}

SemgrexPattern RelationDisj() : {
	SemgrexPattern child;
	List<SemgrexPattern> children = new ArrayList<SemgrexPattern>();
} {
    (	 (child = RelationConj() ) { children.add(child); }
	( ( "|" child = RelationConj() ) { children.add(child); } )* )
 	{ if (children.size() == 1) {
		return child;
	  } else {
		return new CoordinationPattern(false, children, false, false);
      }
    }
}

SemgrexPattern RelationConj() : {
	SemgrexPattern child;
	List<SemgrexPattern> children = new ArrayList<SemgrexPattern>();
} {
    (	  (child = ModRelation() ) { children.add(child); }
	( ( ("&" { deprecatedAmp = true; } )? child = ModRelation() ) { children.add(child); } )* )
 	{ if (children.size() == 1) {
		return child;
	  } else {
		return new CoordinationPattern(false, children, true, false);
      }
    }
}

SemgrexPattern ModRelation() : {
  SemgrexPattern child;
  boolean startUnderNeg;
} {
  ( child = RelChild()
    | ( "!"
        { startUnderNeg = underNegation;
          underNegation = true; } child = RelChild() { underNegation = startUnderNeg; } )
      { child.negate(); }
    | ( "?" child = RelChild() ) { child.makeOptional(); } )
  { return child; }
}

SemgrexPattern RelChild() : {
  SemgrexPattern child;
} {
  (( "[" child = RelationDisj() "]")
    | child = Relation() )
  { return child; }
}

SemgrexPattern Relation() : {
	GraphRelation reln;
	Token rel = null;
	Token relnType = null;
	Token numArg = null;
	Token numArg2 = null;
	Token name = null;
	SemgrexPattern node;
	boolean pC = false;
} {
	(
	( ( ( (numArg = <IDENTIFIER> ("," numArg2 = <IDENTIFIER>)?)? rel = <RELATION>
		(relnType = <IDENTIFIER> | relnType = <REGEX>)?)
		(( ("=") name = <IDENTIFIER> )   )? )
	  | (rel = <ALIGNRELN>))

	{
          if (numArg == null && numArg2 == null) {
            reln = GraphRelation.getRelation(rel != null ? rel.image : null,
                      relnType != null ? relnType.image : null,
                      name != null ? name.image : null);
          } else if (numArg2 == null) {
            reln = GraphRelation.getRelation(rel != null ? rel.image : null,
                      relnType != null ? relnType.image : null,
	              Integer.parseInt(numArg.image),
                      name != null ? name.image : null);
          } else {
            reln = GraphRelation.getRelation(rel != null ? rel.image : null,
                      relnType != null ? relnType.image : null,
                      Integer.parseInt(numArg.image),
                      Integer.parseInt(numArg2.image),
                      name != null ? name.image : null);
	  }
	}
	( (node = ModNode(reln)) |
	  	("(" node = SubNode(reln) ")") ) )

	 {
	 return node;
	}
}

SemgrexPattern NodeDisj(GraphRelation r) : {
	SemgrexPattern child;
	List<SemgrexPattern> children = new ArrayList<SemgrexPattern>();
} {
    ((	 "[" ( child = NodeConj(r) )  { children.add(child); }
	( ( "|" child = NodeConj(r) ) { children.add(child); } )* "]" )
 	{ if (children.size() == 1)
		return child;
	  else
		return new CoordinationPattern(true, children, false, false);
     })
}

SemgrexPattern NodeConj(GraphRelation r) : {
	SemgrexPattern child;
	List<SemgrexPattern> children = new ArrayList<SemgrexPattern>();
} {
    (	 (child = ModNode(r) ) { children.add(child); }
	( ( ("&")? child = ModNode(r) ) { children.add(child); deprecatedNodeConj = true; } )* )
 	{ if (children.size() == 1)
		return child;
	  else
		return new CoordinationPattern(true, children, true, false);
  }
}

SemgrexPattern ModNode(GraphRelation r) : {
	SemgrexPattern child;
	boolean startUnderNeg;
} {
	( child = Child(r)
	  | ( "!"
		  { startUnderNeg = underNodeNegation;
		    underNodeNegation = true; } child = Child(r) { underNodeNegation = startUnderNeg; } )
	   )
	   {
	   	return child; }
}


SemgrexPattern Child(GraphRelation r) : {
	SemgrexPattern child;
} {
	(( child = NodeDisj(r) )
		| child = Description(r) )
	  {
	  return child; }
}

void AddAttribute(NodeAttributes attributes) : {
	Token attr = null;
	Token value = null;
} {
        ((attr = <IDENTIFIER> ":" (value = <IDENTIFIER> | value = <REGEX>) )
         { if (attr != null && value != null) attributes.setAttribute(attr.image, value.image); } )
	|
	( attr = <ROOT> { attributes.setRoot(true); } )
	|
	( attr = <EMPTY> { attributes.setEmpty(true); } )
}

NodePattern Description(GraphRelation r) : {
	Token name = null;
	boolean link = false;
        NodeAttributes attributes = new NodeAttributes();
	NodePattern pat;
} {

	( "{" ( AddAttribute(attributes) 
                (";" AddAttribute(attributes))* )? "}"

	(( ("=" { link = true; }) name = <IDENTIFIER> )
            {
              String nodeName = name.image;
              if (underNegation) {
                if (!knownVariables.contains(nodeName)) {
                  throw new ParseException("Cannot add new variable names under negation.  Node '" + nodeName + "' not seen before");
                }
              } else {
                knownVariables.add(nodeName);
              }
            }
	  )?
	)
  	{ pat = new NodePattern(r, underNodeNegation, attributes.attributes(), attributes.root(), attributes.empty(), name != null ? name.image : null);
	   if (link) pat.makeLink();
	  return pat;
	}
}
